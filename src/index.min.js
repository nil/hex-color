/*!
 * hex-format v2.0.0
 * by Nil Vila
 */
export const defaults={1:{default:"altern",type:["string","boolean"],accepted:["invalid",!1,"altern","repeat","fill"]},2:{default:"repeat",type:["string","boolean"],accepted:["invalid",!1,"altern","repeat","fill"]},3:{default:"altern",type:["string","boolean"],accepted:["invalid",!1,"altern"]},4:{default:"altern",type:["string","boolean"],accepted:["invalid",!1,"altern","repeat","fill"]},5:{default:"altern",type:["string","boolean"],accepted:["invalid",!1,"altern","repeat","fill"]},6:{default:"equal",type:"string",accepted:["repeat","fill","equal","truncate"]},7:{default:"truncate",type:["string","boolean"],accepted:["invalid",!1,"truncate"]},allValid:{type:"boolean",default:!1},minInvalid:{type:"number",default:2},uppercase:{type:"boolean",default:!0}};export function printWarnMessage(e){const t=defaults[e]||defaults.hey.default[e];console.warn(`hex-format: '${e}' has changed to its default value (${t.default}).`)}export function validateChosenValue(e,t,a=defaults){const n=a[e],l=t?t[e]:void 0,r=n.type,o=n.accepted,i=n.default;if(!l&&!1!==l&&0!==l)return i;if(r.includes(typeof l))return o&&!o.includes(l)?(console.error(`hex-format: value '${l}' is not accepted for '${e}'.`),printWarnMessage(e),!1):l;{const t="string"==typeof r?r:r.join(" or a ");return console.error(`hex-format: '${e}' must be a ${t}.`),printWarnMessage(e),i}}export const returnCode={invalid:()=>!1,altern(e){const t=e.length>=3?3:e.length;let a="#";for(let n=0;n<t;n+=1)a+=e[n].repeat(6/t);return a},repeat:e=>`#${e.repeat(6).substring(0,6)}`,fill:(e,t="0")=>`#${e}${t.repeat(6-e.length)}`,equal:e=>`#${e}`,truncate:e=>`#${e.substring(0,6)}`};export default class{constructor(e){this.options={};for(const t in defaults)Object.prototype.hasOwnProperty.call(defaults,t)&&(this.options[t]=validateChosenValue(t,e))}format(e){const t=String(e);if(!1===e)return!1;if(this.options.allValid&&t.match(/[^a-fA-F0-9#]/))return!1;const a=`[^a-fA-F0-9#]{${this.options.minInvalid}}.*`,n=new RegExp(a,"g"),l=t.replace(n,"").replace(/[^a-fA-F0-9]/g,""),r=l.length>7?7:l.length,o=this.options[r];if(0===r)return!1;const i=returnCode[o](l);return i&&this.options.uppercase?i.toUpperCase():i}}